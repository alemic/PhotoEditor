package com.example.photoeditor;import android.app.Activity;import android.content.ContentResolver;import android.content.Context;import android.content.Intent;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Matrix;import android.graphics.drawable.BitmapDrawable;import android.net.Uri;import android.os.Bundle;import android.support.v4.app.FragmentActivity;import android.view.*;import android.view.animation.Animation;import android.view.animation.AnimationUtils;import android.widget.*;import com.capricorn.RayMenu;import com.edmodo.cropper.CropImageView;import com.example.photoeditor.fragments.SaveDialogFragment;import com.example.photoeditor.helpers.*;import java.io.FileNotFoundException;public class StartActivity extends FragmentActivity {	public static final String CHOOSEN_PHOTO = "choosen_photo",TAG="show_dialog";	public static final int INSTAGRAM = 28,ANGLE = 90,MAX_OPACITY = 255,CAMERA=29,GALLERY=30,FILTER = 31,	FUNNY= 32;    private CropImageView mPhoto;	private boolean mIsBehind = false,mCrop = true;	private FrameLayout mContainer;	private RayMenu mArcMenu;	private ImageView mCutsImageView;	private float mScaleWidth,mScaleHeigth;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_start);        mPhoto = (CropImageView)findViewById(R.id.photo);		mContainer = (FrameLayout)findViewById(R.id.photo_container);		mArcMenu = (RayMenu)findViewById(R.id.arc_menu);		mCutsImageView = mPhoto.getCutImageView();		registerForContextMenu(mContainer);        BindHandlers();		initArcMenu();    }    private void BindHandlers()    {		mPhoto.getmImageView().setOnTouchListener(new View.OnTouchListener() {			private float startY;			@Override			public boolean onTouch(View view, MotionEvent motionEvent) {				switch (motionEvent.getActionMasked()) {					case MotionEvent.ACTION_DOWN:						startY = motionEvent.getY();						break;					case MotionEvent.ACTION_MOVE:						float alpha = mPhoto.getmImageView().getImageAlpha() + ((startY - motionEvent.getY()) * 0.07f);						if (alpha < 255 && alpha > 30) {							mPhoto.getmImageView().setImageAlpha((int) alpha);						}						break;				}				return true;			}		});		mCutsImageView.setOnClickListener(new View.OnClickListener() {			@Override			public void onClick(View view) {				try {					mPhoto.setImageBitmap(mPhoto.getCroppedImage());				} catch (IllegalArgumentException ex) {					ex.printStackTrace();				}				mCutsImageView.setVisibility(View.INVISIBLE);				Animation animation = AnimationUtils.loadAnimation(StartActivity.this, R.anim.button_animation);				mCutsImageView.startAnimation(animation);			}		});	}    @Override	protected void onActivityResult(int requestCode, int resultCode, Intent data){		Bitmap photo=null;		if(resultCode!=Activity.RESULT_OK)		{			return;		}		switch (requestCode) {			case INSTAGRAM:				int position = data.getIntExtra(CHOOSEN_PHOTO,-1);				ImageDowloader dowloader = new ImageDowloader();				dowloader.execute(ImagesRepository.getPhotos("","").getmBitmaps().get(position));				while (!(dowloader.isSuccess()));				photo =dowloader.getmPhoto();				setImageBitmap(mIsBehind,photo);				break;			case CAMERA:				byte[]bitmapArray = data.getByteArrayExtra(CameraActivity.RESULT_PHOTO_FROM_CAMERA);				photo = BitmapFactory.decodeByteArray(bitmapArray,0,bitmapArray.length);				setImageBitmap(mIsBehind,photo);				break;			case GALLERY:				Uri uriImage = data.getData();				ContentResolver resolver = getContentResolver();				try {					if(CacheHelper.alreadyInCache(uriImage.toString()))					{						photo = CacheHelper.getBitmap(uriImage.toString());					}					else					{						photo = Drawing.getPermissibleBitmap(resolver.openInputStream(uriImage));						CacheHelper.addBitmap(photo,uriImage.toString());					}				} catch (FileNotFoundException e) {					e.printStackTrace();				}				setImageBitmap(mIsBehind,photo);				break;			case FILTER:				byte[]image = data.getByteArrayExtra(FilterActivity.PHOTO_WITH_EFFECT);				mPhoto.setImageBitmap(ImageSaver.getBitmapFromByteArray(image));				break;			case FUNNY:				photo = ImageSaver.getBitmapFromByteArray(data.getByteArrayExtra(CHOOSEN_PHOTO));				mPhoto.setImageBitmap(photo);				break;			default:				super.onActivityResult(requestCode, resultCode,data);				break;		}	}	private void activityStart(Context context,Class activityClass,int requestCode)	{		Intent intent = new Intent(context, activityClass);		startActivityForResult(intent, requestCode);	}	private int getDifferent(int firstDimension,int secondDimension)	{		firstDimension = firstDimension>secondDimension?(firstDimension-secondDimension)/2:0;		return firstDimension;	}	private void setImageBitmap(boolean isBehind,Bitmap bitmap)	{		if(isBehind)		{			mPhoto.setImageBehind(bitmap);		}		else		{			mPhoto.setImageBitmap(bitmap);			openRayMenu();			mIsBehind = true;		}	}	private void setImageBitmapWithOpacity(Bitmap originalBitmap,int opacity)	{		Bitmap bitmap = new Drawing().setBitmapOpacity(originalBitmap,opacity);		mPhoto.setImageBitmap(bitmap);	}	private void openRayMenu()	{		MotionEvent event = MotionEvent.obtain(0,0,MotionEvent.ACTION_DOWN,0,0,0);		mArcMenu.getContainer().dispatchTouchEvent(event);	}	@Override	public boolean onCreateOptionsMenu(Menu menu) {		MenuInflater inflater = getMenuInflater();		inflater.inflate(R.menu.main_options_menu,menu);		return true;	}	@Override	public boolean onMenuItemSelected(int featureId, MenuItem item) {		switch (item.getItemId())		{			case R.id.save:				if(mPhoto.getOriginalBitmap()!=null) {					setImageBitmapWithOpacity(mPhoto.getOriginalBitmap(), mPhoto.getmImageView().getImageAlpha());					SaveDialogFragment dialogFragment = SaveDialogFragment.newInstance(mPhoto.getOriginalBitmap());					dialogFragment.show(getSupportFragmentManager(),TAG);				}				return true;			case R.id.menu:				openContextMenu(mContainer);				return true;			case R.id.crop:				if(mCrop)				{					item.setTitle(getString(R.string.menu_options_crop));					mPhoto.getmCropOverlayView().setVisibility(View.INVISIBLE);					mCutsImageView.setVisibility(View.INVISIBLE);				}				else				{					item.setTitle(getString(R.string.menu_optins_unCrop));					mPhoto.getmCropOverlayView().setVisibility(View.VISIBLE);				}				mCrop = !mCrop;;				return true;			default:				return super.onMenuItemSelected(featureId,item);		}	}	@Override	public void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo) {		MenuInflater inflater = getMenuInflater();		inflater.inflate(R.menu.main_context_menu,menu);	}	@Override	public boolean onContextItemSelected(MenuItem item) {		switch (item.getItemId()) {			case R.id.instagram:				activityStart(StartActivity.this, InstagramActivity.class, INSTAGRAM);				return true;			case R.id.gallery:				Intent galaryIntent = new Intent(Intent.ACTION_GET_CONTENT);				galaryIntent.setType("image/*");				startActivityForResult(galaryIntent, GALLERY);				return true;			case R.id.camera:				activityStart(this, CameraActivity.class, CAMERA);				return true;			case R.id.filter:				if(mPhoto.getOriginalBitmap()!=null) {					Intent intent = new Intent(this, FilterActivity.class);					Bitmap originalBitmap = mPhoto.getOriginalBitmap();					intent.putExtra(FilterActivity.PHOTO_FROM_EDITOR, ImageSaver.compressImage(originalBitmap, 100));					startActivityForResult(intent, FILTER);					return true;				}			case R.id.funny:				Intent intent = new Intent(this, FunnyActivity.class);				Bitmap originalBitmap = mPhoto.getOriginalBitmap();				intent.putExtra(CHOOSEN_PHOTO, ImageSaver.compressImage(originalBitmap, 90));				startActivityForResult(intent,FUNNY);		}	            return false;	}	private void initArcMenu()	{		int[]sources = {R.drawable.rotate,R.drawable.change,R.drawable.join,R.drawable.clear,R.drawable.left_rigth,		R.drawable.top_bottom};		View.OnClickListener[]listeners =				{						new View.OnClickListener() {							@Override							public void onClick(View view) {								 if(mPhoto.getOriginalBitmap()!=null) {									mPhoto.rotateImage(ANGLE);								 }							}						},						new View.OnClickListener() {							@Override							public void onClick(View view) {								if(mPhoto.getImageBehind()!=null) {									setImageBitmapWithOpacity(mPhoto.getOriginalBitmap(), mPhoto.getmImageView().getImageAlpha());									mPhoto.getmImageView().setImageAlpha(MAX_OPACITY);									mPhoto.replaceImages();								}							}						},						new View.OnClickListener() {							@Override							public void onClick(View view) {								if(mPhoto.getImageBehind()!=null) {									setImageBitmapWithOpacity(mPhoto.getOriginalBitmap(), mPhoto.getmImageView().getImageAlpha());									int top = getDifferent(mPhoto.getImageBehind().getHeight(), mPhoto.getOriginalBitmap().getHeight()),											left = getDifferent(mPhoto.getImageBehind().getWidth(), mPhoto.getOriginalBitmap().getWidth());									Bitmap bitmap = new Drawing().putOverlay(mPhoto.getImageBehind(), mPhoto.getOriginalBitmap(), top, left);									mPhoto.setImageBitmap(bitmap);									mPhoto.clearImages(false);									mPhoto.getmImageView().setImageAlpha(MAX_OPACITY);								}							}						},						new View.OnClickListener() {							@Override							public void onClick(View view) {								mPhoto.clearImages(true);								mPhoto.getmImageView().setImageAlpha(MAX_OPACITY);								mCutsImageView.setVisibility(View.INVISIBLE);								mIsBehind = false;							}						},						new View.OnClickListener() {							@Override							public void onClick(View view) {								mScaleWidth = mPhoto.getImageBehind().getWidth()/mPhoto.getOriginalBitmap().getWidth();								Matrix matrix = new Matrix();								matrix.setScale(mScaleWidth,0);								mPhoto.getmImageView().setImageMatrix(matrix);							}						},						new View.OnClickListener() {							@Override							public void onClick(View view) {								mPhoto.setImageBitmap(Drawing.sizeToBehindBitmap(mPhoto.getOriginalBitmap(),										mPhoto.getImageBehind().getHeight(),true));							}						}				};		 new Drawing().arcMenuInit(mArcMenu,StartActivity.this,listeners,sources);	}}