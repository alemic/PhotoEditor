package com.example.photoeditor;import android.app.Activity;import android.content.ContentResolver;import android.content.Context;import android.content.Intent;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Matrix;import android.graphics.drawable.BitmapDrawable;import android.net.Uri;import android.os.Bundle;import android.support.v4.app.FragmentActivity;import android.view.*;import android.view.animation.Animation;import android.view.animation.AnimationUtils;import android.widget.*;import com.capricorn.RayMenu;import com.edmodo.cropper.CropImageView;import com.example.photoeditor.fragments.SaveDialogFragment;import com.example.photoeditor.helpers.*;import java.io.FileNotFoundException;public class StartActivity extends FragmentActivity {	public static final String CHOOSEN_PHOTO = "choosen_photo",TAG="show_dialog";	public static final int INSTAGRAM = 28,DEFAULT_SCALE= 10,MAX_OPACITY = 255,CAMERA=29,GALLERY=30,FILTER = 31,	FUNNY= 32,PADDING_VALUE= 20;	private boolean mIsBehind = false,mCrop = true,mIsOpacityChange = false,mIsSizeChange =false;	private FrameLayout mContainer;	private RayMenu mArcMenu;	private ImageView mPhotoImageView,mBehindImageView;	private float mScaleValue = 1;	private FrameLayout.LayoutParams mImageViewParams;	private SeekBar mSeekBarOpacityChange,mSeekBarScaleChange;	private Bitmap mPhotoBitmap,mBehindPhotoBitmap;	private RelativeLayout.LayoutParams mContainerParams;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_start);		mContainer = (FrameLayout)findViewById(R.id.photo_container);		mArcMenu = (RayMenu)findViewById(R.id.arc_menu);		mPhotoImageView =(ImageView)findViewById(R.id.photoImageView);		mBehindImageView = (ImageView)findViewById(R.id.behindImageView);		mSeekBarOpacityChange = (SeekBar)findViewById(R.id.seekBarOpacityChange);		mSeekBarScaleChange = (SeekBar)findViewById(R.id.seekBarScale);		mContainerParams = (RelativeLayout.LayoutParams)mContainer.getLayoutParams();		mImageViewParams = (FrameLayout.LayoutParams)mPhotoImageView.getLayoutParams();		registerForContextMenu(mContainer);        BindHandlers();		initArcMenu();    }    private void BindHandlers()    {		mPhotoImageView.setOnTouchListener(new View.OnTouchListener() {			private float startX = 0,startY = 0;			@Override			public boolean onTouch(View view, MotionEvent motionEvent) {				switch (motionEvent.getActionMasked()) {					case MotionEvent.ACTION_DOWN:						mImageViewParams = (FrameLayout.LayoutParams) mPhotoImageView.getLayoutParams();						startX = motionEvent.getX();						startX = motionEvent.getY();						break;					case MotionEvent.ACTION_MOVE:						mImageViewParams.leftMargin += (motionEvent.getX() - startX) * 0.3f;						mImageViewParams.topMargin += (motionEvent.getY() - startY) * 0.3f;					        mPhotoImageView.setLayoutParams(mImageViewParams);						break;					case MotionEvent.ACTION_UP:						break;				}				return true;			}});			mSeekBarOpacityChange.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {				@Override				public void onProgressChanged(SeekBar seekBar, int progress, boolean b) {					mPhotoImageView.setImageAlpha(progress);					mIsOpacityChange = true;				}				@Override				public void onStartTrackingTouch(SeekBar seekBar) {				}				@Override				public void onStopTrackingTouch(SeekBar seekBar) {				}			});		mSeekBarScaleChange.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {			@Override			public void onProgressChanged(SeekBar seekBar, int progress, boolean b) {				mScaleValue = progress/10f;				Matrix matrix = mPhotoImageView.getImageMatrix();				matrix.setScale(mScaleValue,mScaleValue);				mPhotoImageView.setImageMatrix(matrix);				mImageViewParams = (FrameLayout.LayoutParams)mPhotoImageView.getLayoutParams();				mImageViewParams.height= (int)(mPhotoBitmap.getHeight()*mScaleValue);				mImageViewParams.width = (int)(mPhotoBitmap.getWidth()*mScaleValue);				mPhotoImageView.setLayoutParams(mImageViewParams);				mIsSizeChange = true;			}			@Override			public void onStartTrackingTouch(SeekBar seekBar) {			}			@Override			public void onStopTrackingTouch(SeekBar seekBar) {			}		});	}    @Override	protected void onActivityResult(int requestCode, int resultCode, Intent data){		Bitmap photo=null;		if(resultCode!=Activity.RESULT_OK)		{			return;		}		switch (requestCode) {			case INSTAGRAM:				int position = data.getIntExtra(CHOOSEN_PHOTO,-1);				ImageDowloader dowloader = new ImageDowloader();				dowloader.execute(ImagesRepository.getPhotos("","").getmBitmaps().get(position));				while (!(dowloader.isSuccess()));				setImageBitmap(mIsBehind,mPhotoBitmap);				break;			case CAMERA:				byte[]bitmapArray = data.getByteArrayExtra(CameraActivity.RESULT_PHOTO_FROM_CAMERA);				photo = BitmapFactory.decodeByteArray(bitmapArray,0,bitmapArray.length);				setImageBitmap(mIsBehind,photo);				break;			case GALLERY:				Uri uriImage = data.getData();				ContentResolver resolver = getContentResolver();				try {					if(CacheHelper.alreadyInCache(uriImage.toString()))					{						photo = CacheHelper.getBitmap(uriImage.toString());					}					else					{						photo = Drawing.getPermissibleBitmap(resolver.openInputStream(uriImage));						CacheHelper.addBitmap(photo,uriImage.toString());					}				} catch (FileNotFoundException e) {					e.printStackTrace();				}				setImageBitmap(mIsBehind,photo);				break;			case FILTER:				byte[]image = data.getByteArrayExtra(FilterActivity.PHOTO_WITH_EFFECT);				mPhotoImageView.setImageBitmap(ImageSaver.getBitmapFromByteArray(image));				break;			case FUNNY:				mPhotoBitmap = ImageSaver.getBitmapFromByteArray(data.getByteArrayExtra(CHOOSEN_PHOTO));				mPhotoImageView.setImageBitmap(mPhotoBitmap);				break;			default:				super.onActivityResult(requestCode, resultCode,data);				break;		}	}	private void activityStart(Context context,Class activityClass,int requestCode)	{		Intent intent = new Intent(context, activityClass);		startActivityForResult(intent, requestCode);	}	private void replaceImages()	{		acceptChanges();		Bitmap bitmap = mBehindPhotoBitmap;		mBehindPhotoBitmap = mPhotoBitmap;		mPhotoBitmap = bitmap;		mPhotoImageView.setImageBitmap(mPhotoBitmap);		mBehindImageView.setImageBitmap(mBehindPhotoBitmap);	}	private void acceptChanges()	{		if(mIsOpacityChange) {			setImageBitmapWithOpacity(mPhotoBitmap, mPhotoImageView.getImageAlpha());		}		if(mIsSizeChange) {			mPhotoBitmap = Bitmap.createScaledBitmap(mPhotoBitmap, (int) (mPhotoBitmap.getWidth() * mScaleValue),					(int) (mPhotoBitmap.getHeight() * mScaleValue), false);		}	}	private void setImageBitmap(boolean isBehind,Bitmap bitmap)	{		if(isBehind)		{			mBehindImageView.setImageBitmap(bitmap);			if(mPhotoBitmap.getHeight()<bitmap.getHeight())			{				mContainerParams.height = bitmap.getHeight();				mContainerParams.width = bitmap.getWidth();				mContainer.setLayoutParams(mContainerParams);			}			mBehindPhotoBitmap = bitmap;		}		else		{			mPhotoImageView.setImageBitmap(bitmap);			mPhotoBitmap = bitmap;			openRayMenu();			mIsBehind = true;			mContainerParams.height = bitmap.getHeight();			mContainerParams.width = bitmap.getWidth();			mContainer.setLayoutParams(mContainerParams);			resizeToImage();		}	}	private void setMaxProgress(SeekBar ...bars)	{		for(SeekBar bar:bars)		{			bar.setProgress(bar.getMax());		}	}	private void setDefaultProgress()	{		setMaxProgress(mSeekBarOpacityChange);		mSeekBarScaleChange.setProgress(DEFAULT_SCALE);		mIsOpacityChange = false;		mIsSizeChange = false;	}	private void clearImageView(ImageView ...views)	{		for(ImageView view:views)		{			view.setImageBitmap(null);		}	}	private void resizeToContent()	{		if(mPhotoBitmap.getHeight()>mBehindPhotoBitmap.getHeight())		{			mContainerParams.height = (mPhotoBitmap.getHeight()+(PADDING_VALUE*2));			mContainerParams.width = (mPhotoBitmap.getWidth()+(PADDING_VALUE*2));		}		else		{			mContainerParams.height = (mBehindPhotoBitmap.getHeight()+PADDING_VALUE*2);			mContainerParams.width = (mBehindPhotoBitmap.getWidth()+PADDING_VALUE*2);		}		mContainer.setLayoutParams(mContainerParams);	}	private void resizeToImage()	{		mImageViewParams.height = mPhotoBitmap.getHeight();		mImageViewParams.width = mPhotoBitmap.getWidth();		mPhotoImageView.setLayoutParams(mImageViewParams);	}	private void setImageBitmapWithOpacity(Bitmap originalBitmap,int opacity)	{		Bitmap bitmap = new Drawing().setBitmapOpacity(originalBitmap,opacity);		mPhotoImageView.setImageBitmap(bitmap);		mPhotoBitmap = bitmap;	}	private void openRayMenu()	{		MotionEvent event = MotionEvent.obtain(0,0,MotionEvent.ACTION_DOWN,0,0,0);		mArcMenu.getContainer().dispatchTouchEvent(event);	}	@Override	public boolean onCreateOptionsMenu(Menu menu) {		MenuInflater inflater = getMenuInflater();		inflater.inflate(R.menu.main_options_menu,menu);		return true;	}	@Override	public boolean onMenuItemSelected(int featureId, MenuItem item) {		switch (item.getItemId())		{			case R.id.save:				if(mPhotoBitmap!=null) {					setImageBitmapWithOpacity(mPhotoBitmap, mPhotoImageView.getImageAlpha());					SaveDialogFragment dialogFragment = SaveDialogFragment.newInstance(mPhotoBitmap);					dialogFragment.show(getSupportFragmentManager(),TAG);				}				return true;			case R.id.menu:				openContextMenu(mContainer);				return true;			case R.id.crop:				if(mCrop)				{					item.setTitle(getString(R.string.menu_options_crop));				}				else				{					item.setTitle(getString(R.string.menu_optins_unCrop));				}				mCrop = !mCrop;;				return true;			default:				return super.onMenuItemSelected(featureId,item);		}	}	@Override	public void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo) {		MenuInflater inflater = getMenuInflater();		inflater.inflate(R.menu.main_context_menu,menu);	}	@Override	public boolean onContextItemSelected(MenuItem item) {		switch (item.getItemId()) {			case R.id.instagram:				activityStart(StartActivity.this, InstagramActivity.class, INSTAGRAM);				return true;			case R.id.gallery:				Intent galaryIntent = new Intent(Intent.ACTION_GET_CONTENT);				galaryIntent.setType("image/*");				startActivityForResult(galaryIntent, GALLERY);				return true;			case R.id.camera:				activityStart(this, CameraActivity.class, CAMERA);				return true;			case R.id.filter:				if(mPhotoBitmap!=null) {					Intent intent = new Intent(this, FilterActivity.class);					intent.putExtra(FilterActivity.PHOTO_FROM_EDITOR, ImageSaver.compressImage(mPhotoBitmap, 100));					startActivityForResult(intent, FILTER);					return true;				}			case R.id.funny:				Intent intent = new Intent(this, FunnyActivity.class);				intent.putExtra(CHOOSEN_PHOTO, ImageSaver.compressImage(mPhotoBitmap, 90));				startActivityForResult(intent,FUNNY);		}	            return false;	}	private void initArcMenu()	{		int[]sources = {R.drawable.rotate,R.drawable.change,R.drawable.join,R.drawable.clear};		View.OnClickListener[]listeners =				{						new View.OnClickListener() {							@Override							public void onClick(View view) {							}						},						new View.OnClickListener() {							@Override							public void onClick(View view) {								if(mPhotoBitmap!=null) {									mPhotoImageView.setImageAlpha(MAX_OPACITY);									replaceImages();									setDefaultProgress();									resizeToContent();									resizeToImage();								}							}						},						new View.OnClickListener() {							@Override							public void onClick(View view) {								acceptChanges();									Bitmap bitmap = new Drawing().putOverlay(mBehindPhotoBitmap, mPhotoBitmap,											mImageViewParams.topMargin, mImageViewParams.leftMargin);								mPhotoBitmap = bitmap;									mPhotoImageView.setImageBitmap(bitmap);									clearImageView(mBehindImageView);								setDefaultProgress();								mImageViewParams.height = mPhotoBitmap.getHeight();								mImageViewParams.width = mPhotoBitmap.getWidth();								mPhotoImageView.setLayoutParams(mImageViewParams);							}						},						new View.OnClickListener() {							@Override							public void onClick(View view) {								clearImageView(mPhotoImageView,mBehindImageView);								mIsBehind = false;							}						},				};		 new Drawing().arcMenuInit(mArcMenu,StartActivity.this,listeners,sources);	}}